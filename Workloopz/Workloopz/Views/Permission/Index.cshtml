@{
	Layout = "_Layout";
	var Permission = ViewBag.permission;
}
<head>
	<style>
		#title {
			border-bottom: solid 0.5px #A9A9A9;
		}

		#btnedit:hover{
			background-color: #A9A9A9;
		}

		#rolesTable_wrapper {
			margin: 20px; 
		}

		#rolesTable tbody tr:nth-child(even) {
			background-color: #f4f4f4; 
		}

		#rolesTable tbody tr:hover {
			background-color: #e9ecef; 
		}


		#rolesTable thead th {
			background-color: #EEEEEE; 
			
			
		}
		.modal-header {
			background-color: #EEEEEE;
			color: white;
		}

		.modal-footer .btn-secondary {
			background-color: #6c757d;
		}
		.form-check-label {
			font-size: 14px;
		}
	</style>
</head>

<div id="title">
	<h4 id="content">Quản lý phân quyền</h4>
</div>

<table id="rolesTable" class="table table-bordered">
	<thead>
		<tr>
			<th>Role Name</th>
			<th style="text-align: right;">Hành động</th>
		</tr>
	</thead>
	<tbody>
	</tbody>
</table>


<div id="editModal" class="modal fade" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Chỉnh sửa quyền cho <span id="roleName"></span></h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="permissionForm">
					<div class="form-group">
						<label for="typePermissionSelect">Type Permission</label>
						<select id="typePermissionSelect" class="form-control" onchange="loadPermissionsByType(this.value)">
						</select>
					</div>
					<div id="permissionTable">
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
				<button type="button" class="btn btn-primary" onclick="savePermissions()">Lưu thay đổi</button>
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
	let rolesTable;
	let currentRolePermissions = {};
	let allPermissions = [];

	//data tables
	$(document).ready(function () {
		rolesTable = $('#rolesTable').DataTable({
			ajax: {
				url: '/api/permisson/data',
				dataSrc: ''
			},
			columns: [
				{ data: 'roleName' },
				{
					data: 'roleName',
					render: function (data) {
						return `<button id="btnedit" class="btn" onclick="editRole('${data}')">
											<i class="align-middle" data-feather="edit"></i>
									</button>`;
					},
					orderable: false,
					class:'text-end'
				}
			],
			drawCallback: function () {
				
				feather.replace();
			}
		});


		fetch('/api/permisson/data')
			.then(response => response.json())
			.then(data => {
				allPermissions = data.reduce((acc, role) => {
					role.permissions.forEach(type => {
						acc.push(...type.permissions);
					});
					return acc;
				}, []);
			});
	});

	//modal edit role
	function editRole(roleName) {
		fetch(`/api/permisson/data`)
			.then(response => response.json())
			.then(data => {
				const role = data.find(r => r.roleName === roleName);
				if (!role) return;
				document.getElementById('roleName').innerText = roleName;
				currentRolePermissions = role;
				const typePermissionSelect = document.getElementById('typePermissionSelect');
				typePermissionSelect.innerHTML = '<option value="">-- Chọn loại quyền --</option>';


				role.permissions.forEach(type => {
					typePermissionSelect.innerHTML += `<option value="${type.typePermission}">${type.typePermission}</option>`;
				});
				if (role.permissions.length > 0) {
					loadPermissionsByType(role.permissions[0].typePermission);
				}
				const modal = new bootstrap.Modal(document.getElementById('editModal'), {
					keyboard: false
				});
				modal.show();
			})
			.catch(err => {
				console.error('Lỗi khi lấy dữ liệu:', err);
			});
	}


	function loadPermissionsByType(typePermission) {
		if (!typePermission) return;
		const selectedType = currentRolePermissions.permissions.find(type => type.typePermission === typePermission);
		if (!selectedType) return;
		let html = '<table class="table"><thead><tr><th>Permission</th><th>Allow</th></tr></thead><tbody>';
		selectedType.permissions.forEach(p => {
			const checked = currentRolePermissions.assignedPermissions.includes(p.permissionId) ? 'checked' : '';
			html += `<tr>
							<td>${p.permissionName}</td>
							<td><input type="checkbox" value="${p.permissionId}" ${checked} /></td>
						</tr>`;
		});
		html += '</tbody></table>';
		document.getElementById('permissionTable').innerHTML = html;
	}
	function savePermissions() {
		const roleName = document.getElementById('roleName').innerText;
		const checkboxes = document.querySelectorAll('#permissionTable input[type="checkbox"]');
		const permissionIds = Array.from(checkboxes)
			.filter(cb => cb.checked)
			.map(cb => parseInt(cb.value));
		fetch('/api/permisson/update', {
			method: 'PUT',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ RoleName: roleName, PermissionIds: permissionIds })
		})
			.then(response => response.json())
			.then(data => {
				console.log('Phản hồi từ API:', data);
				if (data.message && data.message === "Cập nhật quyền thành công!") {
					alert(data.message);
					$('#editModal').modal('hide');
					rolesTable.ajax.reload();
				} else {
					console.error('Chi tiết lỗi:', data);
					alert(data.message || 'Cập nhật thất bại.');
				}
			})
			.catch(err => {
				console.error('Lỗi khi gọi API:', err);
				alert('Đã xảy ra lỗi khi gọi API.');
			});
	}
</script>
