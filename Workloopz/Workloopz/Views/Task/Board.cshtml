@{
    Layout = "TaskLayout/_TaskLayout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Kanban Board</title>
    <link rel="stylesheet" href="~/lib/Jkanban/jkanban.min.css" />
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" />
    <script src='https://cdnjs.cloudflare.com/ajax/libs/dragula/$VERSION/dragula.min.js'></script>
    <style>
        body {
            font-family: "Lato";
            margin: 0;
            padding: 0;
        }

        #myKanban {
            overflow-x: auto;
            padding: 20px 0;
        }

        .success {
            background: #00b961;
        }

        .info {
            background: #2a92bf;
        }

        .warning {
            background: #f4ce46;
        }

        .error {
            background: #fb7d44;
        }

        .custom-button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 7px 15px;
            margin: 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div id="myKanban"></div>
    @* <button id="addDefault">Add "Default" board</button>
    <br />
    <button id="addToDo">Add element in "To Do" Board</button>
    <br />
    <button id="addToDoAtPosition">Add element in "To Do" Board at position 2</button>
    <br />
    <button id="removeBoard">Remove "Done" Board</button>
    <br />
    <button id="removeElement">Remove "My Task Test"</button> *@

    <script src="~/lib/Jkanban/jkanban.js"></script>
    <script>
        fetch('/api/kanban/data')
            .then(response => response.json())
            .then(data => {     
                var KanbanTest = new jKanban({
                    element: "#myKanban",
                    gutter: "10px",
                    widthBoard: "450px",
                    dragBoards: false,
                    dragItems: true,
                    itemHandleOptions: {
                        enabled: true, // Bật kéo cho các item
                    },
                    click: function (el) {
                        console.log("Trigger on all items click!");
                    },
                    context: function (el, e) {
                        console.log("Trigger on all items right-click!");
                    },
                    dropEl: function (el, target, source, sibling) {
                        const taskId = el.dataset.eid; // ID của task
                        const newStatusId = target.parentElement.getAttribute('data-id'); // ID của board mới
                        console.log(`Moved Task ID ${taskId} to Board ID ${newStatusId}`);

                        // Cập nhật thông tin task trong database nếu cần thiết
                        // Gửi yêu cầu cập nhật trạng thái task
                        fetch('/api/updateTaskStatus', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ taskId, newStatusId }),
                        })
                            .then(response => {
                                if (!response.ok) {
                                    console.error("Failed to update task");
                                }
                            })
                            .catch(error => console.error("Error:", error));
                    },
                    buttonClick: function (el, boardId) {
                        console.log(el);
                        console.log(boardId);
                        var formItem = document.createElement("form");
                        formItem.setAttribute("class", "itemform");
                        formItem.innerHTML =
                            '<div class="form-group"><textarea class="form-control" rows="2" autofocus></textarea></div><div class="form-group"><button type="submit" class="btn btn-primary btn-xs pull-right">Submit</button><button type="button" id="CancelBtn" class="btn btn-default btn-xs pull-right">Cancel</button></div>';

                        KanbanTest.addForm(boardId, formItem);
                        formItem.addEventListener("submit", function (e) {
                            e.preventDefault();
                            var text = e.target[0].value;
                            KanbanTest.addElement(boardId, {
                                title: text
                            });
                            formItem.parentNode.removeChild(formItem);
                        });
                        document.getElementById("CancelBtn").onclick = function () {
                            formItem.parentNode.removeChild(formItem);
                        };
                    },
                    itemAddOptions: {
                        enabled: true,
                        content: '+ Add New Card',
                        class: 'custom-button',
                        footer: true
                    },
                    boards: data.map(board => ({
                        id: board.id.toString(),
                        title: board.title,
                        dragTo: data
                            .filter(b => b.id.toString() !== board.id.toString())  // Cho phép kéo vào các board khác, không cho kéo vào chính nó
                            .map(b => b.id.toString()),
                        item: board.item.map(task => ({
                            id: task.id.toString(),
                            title: task.title
                            
                        }))
                    }))
                });
                console.log(KanbanTest)
                // Các nút để thêm mới task, board và xóa
                // var toDoButton = document.getElementById("addToDo");
                // toDoButton.addEventListener("click", function () {
                //     KanbanTest.addElement("_todo", {
                //         title: "Test Add"
                //     });
                // });

                // var toDoButtonAtPosition = document.getElementById("addToDoAtPosition");
                // toDoButtonAtPosition.addEventListener("click", function () {
                //     KanbanTest.addElement("_todo", {
                //         title: "Test Add at Pos"
                //     }, 1);
                // });

                // var addBoardDefault = document.getElementById("addDefault");
                // addBoardDefault.addEventListener("click", function () {
                //     KanbanTest.addBoards([{
                //         id: "_default",
                //         title: "Kanban Default",
                //         item: [
                //             { title: "Default Task 1" },
                //             { title: "Default Task 2" }
                //         ]
                //     }]);
                // });

                // var removeBoard = document.getElementById("removeBoard");
                // removeBoard.addEventListener("click", function () {
                //     KanbanTest.removeBoard("_done");
                // });

                // var removeElement = document.getElementById("removeElement");
                // removeElement.addEventListener("click", function () {
                //     KanbanTest.removeElement("_test_delete");
                // });
            })
            .catch(error => console.error("Error loading boards:", error));
    </script>

</body>
</html>

</html>
